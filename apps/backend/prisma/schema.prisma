// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dataset {
  name      String   @id @unique
  createdAt DateTime @default(now())

  Stop              Stop[]
  Platform          Platform[]
  PlatformsOnRoutes PlatformsOnRoutes[]
  Route             Route[]
  Trip              Trip[]
  StopTime          StopTime[]
}

model Stop {
  id   String
  name String

  avgLatitude  Float
  avgLongitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platforms Platform[]

  datasetName String
  dataset     Dataset    @relation(fields: [datasetName], references: [name])
  StopTime    StopTime[]

  @@id([id, datasetName])
}

model Platform {
  id      String
  name    String
  code    String?
  isMetro Boolean

  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  routes PlatformsOnRoutes[]

  stop   Stop?   @relation(fields: [stopId, datasetName], references: [id, datasetName])
  stopId String?

  datasetName String
  dataset     Dataset @relation(fields: [datasetName], references: [name])

  @@id([id, datasetName])
}

model Route {
  id   String
  name String

  vehicleType VehicleType?
  isNight     Boolean?

  datasetName String
  dataset     Dataset @relation(fields: [datasetName], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stops PlatformsOnRoutes[]
  Trip  Trip[]

  @@id([id, datasetName])
}

model PlatformsOnRoutes {
  id         String   @id @default(uuid())
  platform   Platform @relation(fields: [platformId, datasetName], references: [id, datasetName])
  platformId String

  route   Route  @relation(fields: [routeId, datasetName], references: [id, datasetName])
  routeId String

  datasetName String
  dataset     Dataset @relation(fields: [datasetName], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id String

  routeId String
  route   Route  @relation(fields: [routeId, datasetName], references: [id, datasetName])

  headsign String

  datasetName String
  dataset     Dataset @relation(fields: [datasetName], references: [name])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  StopTime  StopTime[]

  @@id([id, datasetName])
}

model StopTime {
  id String @id @default(uuid())

  arrivalTime   String?
  departureTime String

  stopId String
  stop   Stop   @relation(fields: [stopId, datasetName], references: [id, datasetName])

  tripId String
  trip   Trip   @relation(fields: [tripId, datasetName], references: [id, datasetName])

  datasetName String
  dataset     Dataset @relation(fields: [datasetName], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        BigInt   @id @default(autoincrement())
  level     LogLevel
  message   String
  trace     Json?
  createdAt DateTime @default(now())
}

enum LogLevel {
  log
  error
  warn
  debug
  verbose
  fatal
}

enum VehicleType {
  METRO
  BUS
  TRAM
  TRAIN
  FERRY
  FUNICULAR
}
